"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Lint = require("tslint/lib");
var ts = require("typescript");
var getClassMethods_1 = require("../helpers/getClassMethods");
var getLeadingWhitespace_1 = require("../helpers/getLeadingWhitespace");
var nodeIsKind_1 = require("../helpers/nodeIsKind");
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithFunction(sourceFile, walk);
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
    ts.forEachChild(ctx.sourceFile, function cb(node) {
        if (nodeIsKind_1.nodeIsKind(node, 'ClassDeclaration') || nodeIsKind_1.nodeIsKind(node, 'ClassExpression')) {
            checkClass(ctx, node);
        }
        return ts.forEachChild(node, cb);
    });
}
function checkClass(ctx, node) {
    var sf = ctx.sourceFile;
    var methods = getClassMethods_1.getClassMethods(node);
    methods.reduce(function (previousMethod, method) {
        var leadingWhitespace = getLeadingWhitespace_1.getLeadingWhitespace(method);
        var newlineCount = leadingWhitespace.match(/\n/g).length;
        var hasComments = /\/\/|\/\*\*/g.test(leadingWhitespace);
        var isFirstMethod = method === node.members[0];
        var isInOverloadGroup = method !== previousMethod &&
            method.name.getText(sf) === previousMethod.name.getText(sf);
        var expectedNewlines = isFirstMethod || isInOverloadGroup ? 1 : 2;
        if (newlineCount < expectedNewlines ||
            (newlineCount > expectedNewlines && !hasComments)) {
            var newLine = leadingWhitespace.match('\r\n') ? '\r\n' : '\n';
            ctx.addFailureAtNode(method.name, 'class methods should be preceded by an empty line', Lint.Replacement.appendText(method.getStart(sf) - leadingWhitespace.length, newLine));
        }
        return method;
    }, methods[0]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3NNZXRob2ROZXdsaW5lc1J1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjbGFzc01ldGhvZE5ld2xpbmVzUnVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxpQ0FBa0M7QUFDbEMsK0JBQWdDO0FBQ2hDLDhEQUE0RDtBQUM1RCx3RUFBc0U7QUFDdEUsb0RBQWtEO0FBRWxEO0lBQTBCLHdCQUF1QjtJQUFqRDs7SUFJQSxDQUFDO0lBSE8sb0JBQUssR0FBWixVQUFhLFVBQXlCO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNoRCxDQUFDO0lBQ0YsV0FBQztBQUFELENBQUMsQUFKRCxDQUEwQixJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FJaEQ7QUFKWSxvQkFBSTtBQU1qQixTQUFTLElBQUksQ0FBQyxHQUEyQjtJQUN4QyxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLENBQUMsSUFBYTtRQUN4RCxJQUFJLHVCQUFVLENBQUMsSUFBSSxFQUFFLGtCQUFrQixDQUFDLElBQUksdUJBQVUsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsRUFBRTtZQUNoRixVQUFVLENBQUMsR0FBRyxFQUFFLElBQStCLENBQUMsQ0FBQTtTQUNoRDtRQUNELE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDakMsQ0FBQyxDQUFDLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsR0FBMkIsRUFBRSxJQUE2QjtJQUM3RSxJQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFBO0lBQ3pCLElBQU0sT0FBTyxHQUFHLGlDQUFlLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFckMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFDLGNBQWMsRUFBRSxNQUFNO1FBQ3JDLElBQU0saUJBQWlCLEdBQUcsMkNBQW9CLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDdEQsSUFBTSxZQUFZLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQTtRQUMxRCxJQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUE7UUFDMUQsSUFBTSxhQUFhLEdBQUcsTUFBTSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDaEQsSUFBTSxpQkFBaUIsR0FDdEIsTUFBTSxLQUFLLGNBQWM7WUFDekIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDNUQsSUFBTSxnQkFBZ0IsR0FBRyxhQUFhLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRW5FLElBQ0MsWUFBWSxHQUFHLGdCQUFnQjtZQUMvQixDQUFDLFlBQVksR0FBRyxnQkFBZ0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUNoRDtZQUNELElBQU0sT0FBTyxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7WUFDL0QsR0FBRyxDQUFDLGdCQUFnQixDQUNuQixNQUFNLENBQUMsSUFBSSxFQUNYLG1EQUFtRCxFQUNuRCxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FDMUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLEVBQzlDLE9BQU8sQ0FDUCxDQUNELENBQUE7U0FDRDtRQUVELE9BQU8sTUFBTSxDQUFBO0lBQ2QsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2YsQ0FBQyJ9