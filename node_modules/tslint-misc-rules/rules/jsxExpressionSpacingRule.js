"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Lint = require("tslint/lib");
var ts = require("typescript");
var nodeIsKind_1 = require("../helpers/nodeIsKind");
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithFunction(sourceFile, walk);
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
    ts.forEachChild(ctx.sourceFile, function cb(node) {
        if (nodeIsKind_1.nodeIsKind(node, 'JsxExpression')) {
            checkExpression(ctx, node);
        }
        return ts.forEachChild(node, cb);
    });
}
function checkExpression(ctx, node) {
    var sf = ctx.sourceFile;
    var _a = node.getChildren(sf), openingBrace = _a[0], value = _a[1], closingBrace = _a[2];
    if (!value || !nodeIsKind_1.nodeIsKind(closingBrace, 'CloseBraceToken')) {
        return;
    }
    if (!isPrecededByValidWhitespace(closingBrace, sf)) {
        var braceStart = closingBrace.getStart(sf);
        var expressionEnd = value.getEnd();
        var spaceCount = braceStart - expressionEnd;
        ctx.addFailureAtNode(closingBrace, "jsx expression should have one space before closing '}'", spaceCount === 0
            ? Lint.Replacement.appendText(expressionEnd, ' ')
            : Lint.Replacement.deleteText(expressionEnd, spaceCount - 1));
    }
    if (!isPrecededByValidWhitespace(value, sf)) {
        var braceEnd = openingBrace.getEnd();
        var expressionStart = value.getStart(sf);
        var spaceCount = expressionStart - braceEnd;
        ctx.addFailureAtNode(openingBrace, "jsx expression should have one space after opening '{'", spaceCount === 0
            ? Lint.Replacement.appendText(braceEnd, ' ')
            : Lint.Replacement.deleteText(braceEnd, spaceCount - 1));
    }
}
function isPrecededByValidWhitespace(node, sf) {
    return (node.getFullStart() === node.getStart(sf) - 1 ||
        /^[\r\n]+/.test(node.getFullText(sf)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianN4RXhwcmVzc2lvblNwYWNpbmdSdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsianN4RXhwcmVzc2lvblNwYWNpbmdSdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGlDQUFrQztBQUNsQywrQkFBZ0M7QUFDaEMsb0RBQWtEO0FBRWxEO0lBQTBCLHdCQUF1QjtJQUFqRDs7SUFJQSxDQUFDO0lBSE8sb0JBQUssR0FBWixVQUFhLFVBQXlCO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNoRCxDQUFDO0lBQ0YsV0FBQztBQUFELENBQUMsQUFKRCxDQUEwQixJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FJaEQ7QUFKWSxvQkFBSTtBQU1qQixTQUFTLElBQUksQ0FBQyxHQUEyQjtJQUN4QyxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLENBQUMsSUFBYTtRQUN4RCxJQUFJLHVCQUFVLENBQW1CLElBQUksRUFBRSxlQUFlLENBQUMsRUFBRTtZQUN4RCxlQUFlLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFBO1NBQzFCO1FBQ0QsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNqQyxDQUFDLENBQUMsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxHQUEyQixFQUFFLElBQXNCO0lBQzNFLElBQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUE7SUFDbkIsSUFBQSx5QkFBMEQsRUFBekQsb0JBQVksRUFBRSxhQUFLLEVBQUUsb0JBQW9DLENBQUE7SUFFaEUsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLHVCQUFVLENBQUMsWUFBWSxFQUFFLGlCQUFpQixDQUFDLEVBQUU7UUFDM0QsT0FBTTtLQUNOO0lBRUQsSUFBSSxDQUFDLDJCQUEyQixDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsRUFBRTtRQUNuRCxJQUFNLFVBQVUsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQzVDLElBQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUNwQyxJQUFNLFVBQVUsR0FBRyxVQUFVLEdBQUcsYUFBYSxDQUFBO1FBQzdDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FDbkIsWUFBWSxFQUNaLHlEQUF5RCxFQUN6RCxVQUFVLEtBQUssQ0FBQztZQUNmLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDO1lBQ2pELENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUM3RCxDQUFBO0tBQ0Q7SUFFRCxJQUFJLENBQUMsMkJBQTJCLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQzVDLElBQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUN0QyxJQUFNLGVBQWUsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQzFDLElBQU0sVUFBVSxHQUFHLGVBQWUsR0FBRyxRQUFRLENBQUE7UUFDN0MsR0FBRyxDQUFDLGdCQUFnQixDQUNuQixZQUFZLEVBQ1osd0RBQXdELEVBQ3hELFVBQVUsS0FBSyxDQUFDO1lBQ2YsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUM7WUFDNUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQ3hELENBQUE7S0FDRDtBQUNGLENBQUM7QUFFRCxTQUFTLDJCQUEyQixDQUFDLElBQWEsRUFBRSxFQUFpQjtJQUNwRSxPQUFPLENBQ04sSUFBSSxDQUFDLFlBQVksRUFBRSxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUM3QyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDckMsQ0FBQTtBQUNGLENBQUMifQ==