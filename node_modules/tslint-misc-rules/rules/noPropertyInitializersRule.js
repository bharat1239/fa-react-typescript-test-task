"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Lint = require("tslint/lib");
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new ClassMethodNewlinesWalker(sourceFile, this.getOptions()));
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var ClassMethodNewlinesWalker = /** @class */ (function (_super) {
    __extends(ClassMethodNewlinesWalker, _super);
    function ClassMethodNewlinesWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ClassMethodNewlinesWalker.prototype.visitClassDeclaration = function (node) {
        _super.prototype.visitClassDeclaration.call(this, node);
        this.validate(node);
    };
    ClassMethodNewlinesWalker.prototype.visitClassExpression = function (node) {
        _super.prototype.visitClassExpression.call(this, node);
        this.validate(node);
    };
    ClassMethodNewlinesWalker.prototype.validate = function (node) {
        for (var _i = 0, _a = node.members; _i < _a.length; _i++) {
            var member = _a[_i];
            if (member.initializer) {
                this.addFailure(this.createFailure(member.name.getStart(), member.name.getWidth(), 'property initializers are nonstandard -- assign in constructor or method'));
            }
        }
    };
    return ClassMethodNewlinesWalker;
}(Lint.RuleWalker));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9Qcm9wZXJ0eUluaXRpYWxpemVyc1J1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJub1Byb3BlcnR5SW5pdGlhbGl6ZXJzUnVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxpQ0FBa0M7QUFHbEM7SUFBMEIsd0JBQXVCO0lBQWpEOztJQU1BLENBQUM7SUFMTyxvQkFBSyxHQUFaLFVBQWEsVUFBeUI7UUFDckMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUMxQixJQUFJLHlCQUF5QixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FDNUQsQ0FBQTtJQUNGLENBQUM7SUFDRixXQUFDO0FBQUQsQ0FBQyxBQU5ELENBQTBCLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQU1oRDtBQU5ZLG9CQUFJO0FBUWpCO0lBQXdDLDZDQUFlO0lBQXZEOztJQXdCQSxDQUFDO0lBdkJPLHlEQUFxQixHQUE1QixVQUE2QixJQUF5QjtRQUNyRCxpQkFBTSxxQkFBcUIsWUFBQyxJQUFJLENBQUMsQ0FBQTtRQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3BCLENBQUM7SUFFTSx3REFBb0IsR0FBM0IsVUFBNEIsSUFBd0I7UUFDbkQsaUJBQU0sb0JBQW9CLFlBQUMsSUFBSSxDQUFDLENBQUE7UUFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNwQixDQUFDO0lBRU8sNENBQVEsR0FBaEIsVUFBaUIsSUFBNkI7UUFDN0MsS0FBcUIsVUFBWSxFQUFaLEtBQUEsSUFBSSxDQUFDLE9BQU8sRUFBWixjQUFZLEVBQVosSUFBWSxFQUFFO1lBQTlCLElBQU0sTUFBTSxTQUFBO1lBQ2hCLElBQUssTUFBaUMsQ0FBQyxXQUFXLEVBQUU7Z0JBQ25ELElBQUksQ0FBQyxVQUFVLENBQ2QsSUFBSSxDQUFDLGFBQWEsQ0FDakIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFDdEIsMEVBQTBFLENBQzFFLENBQ0QsQ0FBQTthQUNEO1NBQ0Q7SUFDRixDQUFDO0lBQ0YsZ0NBQUM7QUFBRCxDQUFDLEFBeEJELENBQXdDLElBQUksQ0FBQyxVQUFVLEdBd0J0RCJ9