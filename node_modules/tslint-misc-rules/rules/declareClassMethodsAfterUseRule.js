"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Lint = require("tslint/lib");
var ts = require("typescript");
var getClassMethods_1 = require("../helpers/getClassMethods");
var nodeIsKind_1 = require("../helpers/nodeIsKind");
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new DeclareClassMethodsAfterUseWalker(sourceFile, this.ruleName, this.getOptions()));
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var DeclareClassMethodsAfterUseWalker = /** @class */ (function (_super) {
    __extends(DeclareClassMethodsAfterUseWalker, _super);
    function DeclareClassMethodsAfterUseWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeclareClassMethodsAfterUseWalker.prototype.walk = function (sourceFile) {
        var _this = this;
        var cb = function (node) {
            if (nodeIsKind_1.nodeIsKind(node, 'ClassDeclaration') ||
                nodeIsKind_1.nodeIsKind(node, 'ClassExpression')) {
                _this.validate(node);
            }
            return ts.forEachChild(node, cb);
        };
        ts.forEachChild(sourceFile, cb);
    };
    DeclareClassMethodsAfterUseWalker.prototype.validate = function (node) {
        var _this = this;
        this.visitedMethodDeclarations = [];
        this.visitedMethodCalls = [];
        for (var _i = 0, _a = getClassMethods_1.getClassMethods(node); _i < _a.length; _i++) {
            var method = _a[_i];
            this.currentMethodName = method.name.getText(this.getSourceFile());
            this.visitedMethodDeclarations.push(this.currentMethodName);
            ts.forEachChild(method, function (child) {
                _this.visitChildren(child);
            });
        }
    };
    DeclareClassMethodsAfterUseWalker.prototype.visitChildren = function (node) {
        var _this = this;
        ts.forEachChild(node, function (child) {
            if (nodeIsKind_1.nodeIsKind(child, 'CallExpression')) {
                _this.visitCallExpressionInMethod(child);
            }
            _this.visitChildren(child);
        });
    };
    DeclareClassMethodsAfterUseWalker.prototype.visitCallExpressionInMethod = function (node) {
        if (!this.callExpressionBelongsToThis(node.expression)) {
            return;
        }
        var propertyExpression = node.expression;
        var methodName = propertyExpression.name.text;
        if (this.methodHasBeenDeclared(methodName)) {
            if (!this.isRecursion(methodName) && !this.methodHasBeenCalled(methodName)) {
                this.addFailureAtNode(propertyExpression, 'declare class methods after use');
            }
        }
        else {
            // declaration needs to come after first use, not all uses.
            // once we've seen a callsite before a declaration, don't
            // error on any future callsites for that method
            this.visitedMethodCalls.push(methodName);
        }
    };
    DeclareClassMethodsAfterUseWalker.prototype.callExpressionBelongsToThis = function (node) {
        return (nodeIsKind_1.nodeIsKind(node, 'PropertyAccessExpression') &&
            nodeIsKind_1.nodeIsKind(node.expression, 'ThisKeyword'));
    };
    DeclareClassMethodsAfterUseWalker.prototype.methodHasBeenDeclared = function (name) {
        return this.visitedMethodDeclarations.indexOf(name) > -1;
    };
    DeclareClassMethodsAfterUseWalker.prototype.methodHasBeenCalled = function (name) {
        return this.visitedMethodCalls.indexOf(name) > -1;
    };
    DeclareClassMethodsAfterUseWalker.prototype.isRecursion = function (name) {
        return this.currentMethodName === name;
    };
    return DeclareClassMethodsAfterUseWalker;
}(Lint.AbstractWalker));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjbGFyZUNsYXNzTWV0aG9kc0FmdGVyVXNlUnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRlY2xhcmVDbGFzc01ldGhvZHNBZnRlclVzZVJ1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsaUNBQWtDO0FBQ2xDLCtCQUFnQztBQUNoQyw4REFBNEQ7QUFDNUQsb0RBQWtEO0FBRWxEO0lBQTBCLHdCQUF1QjtJQUFqRDs7SUFVQSxDQUFDO0lBVE8sb0JBQUssR0FBWixVQUFhLFVBQXlCO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FDMUIsSUFBSSxpQ0FBaUMsQ0FDcEMsVUFBVSxFQUNWLElBQUksQ0FBQyxRQUFRLEVBQ2IsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUNqQixDQUNELENBQUE7SUFDRixDQUFDO0lBQ0YsV0FBQztBQUFELENBQUMsQUFWRCxDQUEwQixJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FVaEQ7QUFWWSxvQkFBSTtBQVlqQjtJQUFnRCxxREFBdUI7SUFBdkU7O0lBbUZBLENBQUM7SUE5RU8sZ0RBQUksR0FBWCxVQUFZLFVBQXlCO1FBQXJDLGlCQVlDO1FBWEEsSUFBTSxFQUFFLEdBQUcsVUFBQyxJQUFhO1lBQ3hCLElBQ0MsdUJBQVUsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLENBQUM7Z0JBQ3BDLHVCQUFVLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLEVBQ2xDO2dCQUNELEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBK0IsQ0FBQyxDQUFBO2FBQzlDO1lBQ0QsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUNqQyxDQUFDLENBQUE7UUFFRCxFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNoQyxDQUFDO0lBRU8sb0RBQVEsR0FBaEIsVUFBaUIsSUFBNkI7UUFBOUMsaUJBV0M7UUFWQSxJQUFJLENBQUMseUJBQXlCLEdBQUcsRUFBRSxDQUFBO1FBQ25DLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxFQUFFLENBQUE7UUFFNUIsS0FBcUIsVUFBcUIsRUFBckIsS0FBQSxpQ0FBZSxDQUFDLElBQUksQ0FBQyxFQUFyQixjQUFxQixFQUFyQixJQUFxQixFQUFFO1lBQXZDLElBQU0sTUFBTSxTQUFBO1lBQ2hCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQTtZQUNsRSxJQUFJLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1lBQzNELEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQUEsS0FBSztnQkFDNUIsS0FBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUMxQixDQUFDLENBQUMsQ0FBQTtTQUNGO0lBQ0YsQ0FBQztJQUVPLHlEQUFhLEdBQXJCLFVBQXNCLElBQWE7UUFBbkMsaUJBUUM7UUFQQSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxVQUFBLEtBQUs7WUFDMUIsSUFBSSx1QkFBVSxDQUFvQixLQUFLLEVBQUUsZ0JBQWdCLENBQUMsRUFBRTtnQkFDM0QsS0FBSSxDQUFDLDJCQUEyQixDQUFDLEtBQUssQ0FBQyxDQUFBO2FBQ3ZDO1lBRUQsS0FBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUMxQixDQUFDLENBQUMsQ0FBQTtJQUNILENBQUM7SUFFTyx1RUFBMkIsR0FBbkMsVUFBb0MsSUFBdUI7UUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDdkQsT0FBTTtTQUNOO1FBRUQsSUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsVUFBeUMsQ0FBQTtRQUN6RSxJQUFNLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFBO1FBRS9DLElBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUMzRSxJQUFJLENBQUMsZ0JBQWdCLENBQ3BCLGtCQUFrQixFQUNsQixpQ0FBaUMsQ0FDakMsQ0FBQTthQUNEO1NBQ0Q7YUFBTTtZQUNOLDJEQUEyRDtZQUMzRCx5REFBeUQ7WUFDekQsZ0RBQWdEO1lBQ2hELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7U0FDeEM7SUFDRixDQUFDO0lBRU8sdUVBQTJCLEdBQW5DLFVBQW9DLElBQW1CO1FBQ3RELE9BQU8sQ0FDTix1QkFBVSxDQUE4QixJQUFJLEVBQUUsMEJBQTBCLENBQUM7WUFDekUsdUJBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUMxQyxDQUFBO0lBQ0YsQ0FBQztJQUVPLGlFQUFxQixHQUE3QixVQUE4QixJQUFZO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUN6RCxDQUFDO0lBRU8sK0RBQW1CLEdBQTNCLFVBQTRCLElBQVk7UUFDdkMsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ2xELENBQUM7SUFFTyx1REFBVyxHQUFuQixVQUFvQixJQUFZO1FBQy9CLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixLQUFLLElBQUksQ0FBQTtJQUN2QyxDQUFDO0lBQ0Ysd0NBQUM7QUFBRCxDQUFDLEFBbkZELENBQWdELElBQUksQ0FBQyxjQUFjLEdBbUZsRSJ9