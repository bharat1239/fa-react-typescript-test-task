"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Lint = require('tslint/lib/lint');
var ts = require('typescript');
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        _super.apply(this, arguments);
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new JsxAttributeValueSpacingWalker(sourceFile, this.getOptions()));
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var JsxAttributeValueSpacingWalker = (function (_super) {
    __extends(JsxAttributeValueSpacingWalker, _super);
    function JsxAttributeValueSpacingWalker() {
        _super.apply(this, arguments);
    }
    JsxAttributeValueSpacingWalker.prototype.visitJsxElement = function (node) {
        this.validateAttributes(node.openingElement.attributes);
        _super.prototype.visitJsxElement.call(this, node);
    };
    JsxAttributeValueSpacingWalker.prototype.visitJsxSelfClosingElement = function (node) {
        this.validateAttributes(node.attributes);
        _super.prototype.visitJsxSelfClosingElement.call(this, node);
    };
    JsxAttributeValueSpacingWalker.prototype.validateAttributes = function (nodes) {
        var nonSpreadAttributes = nodes.filter(function (n) { return n.kind === ts.SyntaxKind.JsxAttribute; });
        for (var _i = 0, nonSpreadAttributes_1 = nonSpreadAttributes; _i < nonSpreadAttributes_1.length; _i++) {
            var attribute = nonSpreadAttributes_1[_i];
            var initializer = attribute.initializer, name_1 = attribute.name;
            if (!initializer) {
                continue;
            }
            var value = initializer.getChildAt(1);
            var closingBrace = initializer.getChildAt(2);
            if (!value || !this.isClosingBrace(closingBrace)) {
                continue;
            }
            if (!this.isPrecededByValidWhitespace(value) ||
                !this.isPrecededByValidWhitespace(closingBrace)) {
                this.addFailure(this.createFailure(attribute.getStart(), attribute.getWidth(), "jsx attribute '" + name_1.getText() + "' should have one space between braces and value"));
            }
        }
    };
    JsxAttributeValueSpacingWalker.prototype.isPrecededByValidWhitespace = function (node) {
        return (node.getFullStart() === node.getStart() - 1 ||
            node.getFullText().match(/^[\r\n]+/));
    };
    JsxAttributeValueSpacingWalker.prototype.isClosingBrace = function (node) {
        return node && node.kind === ts.SyntaxKind.CloseBraceToken;
    };
    return JsxAttributeValueSpacingWalker;
}(Lint.RuleWalker));
