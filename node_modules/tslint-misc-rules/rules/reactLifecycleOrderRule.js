"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Lint = require("tslint/lib");
var getClassMethods_1 = require("../helpers/getClassMethods");
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new ReactLifecyleOrderRule(sourceFile, this.getOptions()));
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var defaultOrder = [
    'componentWillMount',
    'render',
    'componentDidMount',
    'componentWillReceiveProps',
    'shouldComponentUpdate',
    'componentWillUpdate',
    'componentDidUpdate',
    'componentWillUnmount',
];
var ReactLifecyleOrderRule = /** @class */ (function (_super) {
    __extends(ReactLifecyleOrderRule, _super);
    function ReactLifecyleOrderRule(sourceFile, options) {
        var _this = _super.call(this, sourceFile, options) || this;
        var orderOptions = _this.getOptions();
        _this.expectedOrder =
            orderOptions && orderOptions.length > 0 ? orderOptions : defaultOrder;
        return _this;
    }
    ReactLifecyleOrderRule.prototype.visitClassDeclaration = function (node) {
        this.validate(node);
        _super.prototype.visitClassDeclaration.call(this, node);
    };
    ReactLifecyleOrderRule.prototype.visitClassExpression = function (node) {
        this.validate(node);
        _super.prototype.visitClassExpression.call(this, node);
    };
    ReactLifecyleOrderRule.prototype.validate = function (node) {
        var _this = this;
        if (!this.isReactComponent(node)) {
            return;
        }
        var sf = this.getSourceFile();
        var relevantMethods = getClassMethods_1.getClassMethods(node).filter(function (method) { return _this.expectedOrder.indexOf(method.name.getText(sf)) > -1; });
        var sortedMethods = relevantMethods.slice().sort(function (left, right) {
            var leftName = left.name.getText(sf);
            var rightName = right.name.getText(sf);
            var leftIndex = _this.expectedOrder.indexOf(leftName);
            var rightIndex = _this.expectedOrder.indexOf(rightName);
            return leftIndex > rightIndex ? 1 : -1;
        });
        relevantMethods.forEach(function (method, index) {
            if (sortedMethods[index] !== method) {
                _this.addFailure(_this.createFailure(method.name.getStart(sf), method.name.getWidth(sf), "expected React lifecyle method '" + sortedMethods[index].name.getText(sf) + "'"));
            }
        });
    };
    ReactLifecyleOrderRule.prototype.isReactComponent = function (node) {
        if (!node.heritageClauses || node.heritageClauses.length !== 1) {
            return false;
        }
        var ancestor = node.heritageClauses[0].types[0];
        if (!ancestor) {
            return false;
        }
        return ([
            'React.Component',
            'React.PureComponent',
            'Component',
            'PureComponent',
        ].indexOf(ancestor.getText(this.getSourceFile()).replace(/<.+?>$/, '')) > -1);
    };
    return ReactLifecyleOrderRule;
}(Lint.RuleWalker));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3RMaWZlY3ljbGVPcmRlclJ1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWFjdExpZmVjeWNsZU9yZGVyUnVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxpQ0FBa0M7QUFFbEMsOERBQTREO0FBRTVEO0lBQTBCLHdCQUF1QjtJQUFqRDs7SUFNQSxDQUFDO0lBTE8sb0JBQUssR0FBWixVQUFhLFVBQXlCO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FDMUIsSUFBSSxzQkFBc0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQ3pELENBQUE7SUFDRixDQUFDO0lBQ0YsV0FBQztBQUFELENBQUMsQUFORCxDQUEwQixJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FNaEQ7QUFOWSxvQkFBSTtBQVFqQixJQUFNLFlBQVksR0FBRztJQUNwQixvQkFBb0I7SUFDcEIsUUFBUTtJQUNSLG1CQUFtQjtJQUNuQiwyQkFBMkI7SUFDM0IsdUJBQXVCO0lBQ3ZCLHFCQUFxQjtJQUNyQixvQkFBb0I7SUFDcEIsc0JBQXNCO0NBQ3RCLENBQUE7QUFFRDtJQUFxQywwQ0FBZTtJQUduRCxnQ0FBbUIsVUFBVSxFQUFFLE9BQU87UUFBdEMsWUFDQyxrQkFBTSxVQUFVLEVBQUUsT0FBTyxDQUFDLFNBSTFCO1FBSEEsSUFBTSxZQUFZLEdBQUcsS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO1FBQ3RDLEtBQUksQ0FBQyxhQUFhO1lBQ2pCLFlBQVksSUFBSSxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUE7O0lBQ3ZFLENBQUM7SUFFTSxzREFBcUIsR0FBNUIsVUFBNkIsSUFBeUI7UUFDckQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNuQixpQkFBTSxxQkFBcUIsWUFBQyxJQUFJLENBQUMs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