"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Lint = require("tslint/lib");
var ts = require("typescript");
var nodeIsKind_1 = require("../helpers/nodeIsKind");
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithFunction(sourceFile, walk);
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
    ts.forEachChild(ctx.sourceFile, function cb(node) {
        if (nodeIsKind_1.nodeIsKind(node, 'ConditionalExpression')) {
            check(ctx, node);
        }
        return ts.forEachChild(node, cb);
    });
}
function check(ctx, node) {
    var sf = ctx.sourceFile;
    var condition = node.condition, whenTrue = node.whenTrue, questionToken = node.questionToken, colonToken = node.colonToken;
    if (condition.getText(sf) === whenTrue.getText(sf) &&
        ((isIdentifier(condition) && isIdentifier(whenTrue)) ||
            (isPropertyAccessChain(condition) && isPropertyAccessChain(whenTrue)))) {
        var fix = Lint.Replacement.replaceFromTo(questionToken.getStart(sf), colonToken.getStart(sf) + 1, '||');
        ctx.addFailureAtNode(whenTrue, "use '||' when first and second operands of ternary are identical", fix);
    }
}
function isPropertyAccessChain(startNode) {
    if (!isPropertyAccess(startNode) || !isIdentifier(startNode.name)) {
        return false;
    }
    var node = startNode;
    while (isPropertyAccess(node.expression)) {
        node = node.expression;
    }
    return (node.expression &&
        (isIdentifier(node.expression) ||
            node.expression.kind === ts.SyntaxKind.ThisKeyword));
}
function isIdentifier(node) {
    return node && node.kind === ts.SyntaxKind.Identifier;
}
function isPropertyAccess(node) {
    return node && node.kind === ts.SyntaxKind.PropertyAccessExpression;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlZmVyT3JPcGVyYXRvck92ZXJUZXJuYXJ5UnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByZWZlck9yT3BlcmF0b3JPdmVyVGVybmFyeVJ1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsaUNBQWtDO0FBQ2xDLCtCQUFnQztBQUNoQyxvREFBa0Q7QUFFbEQ7SUFBMEIsd0JBQXVCO0lBQWpEOztJQUlBLENBQUM7SUFITyxvQkFBSyxHQUFaLFVBQWEsVUFBeUI7UUFDckMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQ2hELENBQUM7SUFDRixXQUFDO0FBQUQsQ0FBQyxBQUpELENBQTBCLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUloRDtBQUpZLG9CQUFJO0FBTWpCLFNBQVMsSUFBSSxDQUFDLEdBQTJCO0lBQ3hDLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxJQUFhO1FBQ3hELElBQUksdUJBQVUsQ0FBMkIsSUFBSSxFQUFFLHVCQUF1QixDQUFDLEVBQUU7WUFDeEUsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtTQUNoQjtRQUNELE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDakMsQ0FBQyxDQUFDLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxLQUFLLENBQUMsR0FBMkIsRUFBRSxJQUE4QjtJQUN6RSxJQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFBO0lBQ2pCLElBQUEsMEJBQVMsRUFBRSx3QkFBUSxFQUFFLGtDQUFhLEVBQUUsNEJBQVUsQ0FBUztJQUUvRCxJQUNDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDOUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbkQsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQ3RFO1FBQ0QsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQ3pDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQzFCLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUMzQixJQUFJLENBQ0osQ0FBQTtRQUNELEdBQUcsQ0FBQyxnQkFBZ0IsQ0FDbkIsUUFBUSxFQUNSLGtFQUFrRSxFQUNsRSxHQUFHLENBQ0gsQ0FBQTtLQUNEO0FBQ0YsQ0FBQztBQUVELFNBQVMscUJBQXFCLENBQUMsU0FBd0I7SUFDdEQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNsRSxPQUFPLEtBQUssQ0FBQTtLQUNaO0lBRUQsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFBO0lBQ3BCLE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ3pDLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFBO0tBQ3RCO0lBRUQsT0FBTyxDQUNOLElBQUksQ0FBQyxVQUFVO1FBQ2YsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUNwRCxDQUFBO0FBQ0YsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLElBQWE7SUFDbEMsT0FBTyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQTtBQUN0RCxDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxJQUFhO0lBQ3RDLE9BQU8sSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLFVBQVUsQ0FBQyx3QkFBd0IsQ0FBQTtBQUNwRSxDQUFDIn0=