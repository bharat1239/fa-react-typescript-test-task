"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var lib_1 = require("tslint/lib");
var typescript_1 = require("typescript");
var jasmineUtils_1 = require("./utils/jasmineUtils");
var find = require("lodash/find");
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new JasmineNoLambdaExpressionCallbacksWalker(sourceFile, this.getOptions()));
    };
    return Rule;
}(lib_1.Rules.AbstractRule));
Rule.metadata = {
    ruleName: 'jasmine-no-lambda-expression-callbacks',
    description: (_a = ["\n      Disallows usage of ES6-style lambda expressions as callbacks to Jasmine BDD functions."], _a.raw = ["\n      Disallows usage of ES6-style lambda expressions as callbacks to Jasmine BDD functions."], lib_1.Utils.dedent(_a)),
    rationale: (_b = ["\n      Lambda expressions don't create lexical `this` bindings in order for `this` bindings from outer function scopes to be\n      visible inside of lambda expressions. This beats Jasmine's own system of managing shared state by passing in a dictionary object\n      as `this` reference to the user-provided callbacks to take over the memory management from the JavaScript VM to prevent memory\n      leaks during test runs.\n\n      This rule will also check for cases where a call to a function is made with a lambda expression parameter instead of\n      passing a lambda expression directly as callback to support Angular 2 test style:\n      ```js\n      beforeEach(async(() => {\n        ...\n      }));\n\n      it('something', inject([Service], (service) => {\n        ...\n      }))\n      ```"], _b.raw = ["\n      Lambda expressions don't create lexical \\`this\\` bindings in order for \\`this\\` bindings from outer function scopes to be\n      visible inside of lambda expressions. This beats Jasmine's own system of managing shared state by passing in a dictionary object\n      as \\`this\\` reference to the user-provided callbacks to take over the memory management from the JavaScript VM to prevent memory\n      leaks during test runs.\n\n      This rule will also check for cases where a call to a function is made with a lambda expression parameter instead of\n      passing a lambda expression directly as callback to support Angular 2 test style:\n      \\`\\`\\`js\n      beforeEach(async(() => {\n        ...\n      }));\n\n      it('something', inject([Service], (service) => {\n        ...\n      }))\n      \\`\\`\\`"], lib_1.Utils.dedent(_b)),
    optionsDescription: 'Not configurable.',
    optionExamples: ['true'],
    options: null,
    type: 'maintainability',
    typescriptOnly: false,
};
Rule.FAILURE_STRING = "Don't use lambda expressions as callbacks to jasmine functions";
exports.Rule = Rule;
var JasmineNoLambdaExpressionCallbacksWalker = (function (_super) {
    __extends(JasmineNoLambdaExpressionCallbacksWalker, _super);
    function JasmineNoLambdaExpressionCallbacksWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JasmineNoLambdaExpressionCallbacksWalker.prototype.visitSourceFile = function (node) {
        if (jasmineUtils_1.isJasmineTest(node)) {
            _super.prototype.visitSourceFile.call(this, node);
        }
    };
    JasmineNoLambdaExpressionCallbacksWalker.prototype.visitCallExpression = function (node) {
        var invalidLambdaExpression = this.getInvalidLambdaExpression(node);
        if (invalidLambdaExpression) {
            this.addFailureAtNode(invalidLambdaExpression, Rule.FAILURE_STRING, this.getFix(invalidLambdaExpression));
        }
        _super.prototype.visitCallExpression.call(this, node);
    };
    JasmineNoLambdaExpressionCallbacksWalker.prototype.getInvalidLambdaExpression = function (node) {
        if (node.expression.kind !== typescript_1.SyntaxKind.Identifier) {
            return false;
        }
        var functionIdentifier = node.expression.getText();
        var functionArgs = node.arguments;
        if ((jasmineUtils_1.isJasmineDescribe(functionIdentifier) || jasmineUtils_1.isJasmineIt(functionIdentifier)) && functionArgs.length > 1) {
            return this.getLambdaExpressionFromArg(functionArgs[1]) || false;
        }
        else if (jasmineUtils_1.isJasmineSetupTeardown(functionIdentifier) && functionArgs.length > 0) {
            return this.getLambdaExpressionFromArg(functionArgs[0]) || false;
        }
        return false;
    };
    JasmineNoLambdaExpressionCallbacksWalker.prototype.getLambdaExpressionFromArg = function (apiArg) {
        if (apiArg.kind === typescript_1.SyntaxKind.ArrowFunction) {
            return apiArg;
        }
        else if (apiArg.kind === typescript_1.SyntaxKind.CallExpression) {
            return find(apiArg.arguments, function (arg) { return arg.kind === typescript_1.SyntaxKind.ArrowFunction; });
        }
        return null;
    };
    JasmineNoLambdaExpressionCallbacksWalker.prototype.getFix = function (lambdaExpression) {
        var arrowToken = lambdaExpression.equalsGreaterThanToken;
        var replacements = [
            new lib_1.Replacement(lambdaExpression.getStart(), 0, 'function'),
            new lib_1.Replacement(arrowToken.getStart(), lambdaExpression.body.getStart() - arrowToken.getStart(), '')
        ];
        if (lambdaExpression.body.kind !== typescript_1.SyntaxKind.Block) {
            replacements.push(new lib_1.Replacement(lambdaExpression.body.getStart(), 0, '{ return '), new lib_1.Replacement(lambdaExpression.getStart() + lambdaExpression.getWidth(), 0, '; }'));
        }
        return replacements;
    };
    return JasmineNoLambdaExpressionCallbacksWalker;
}(lib_1.RuleWalker));
var _a, _b;
//# sourceMappingURL=jasmineNoLambdaExpressionCallbacksRule.js.map