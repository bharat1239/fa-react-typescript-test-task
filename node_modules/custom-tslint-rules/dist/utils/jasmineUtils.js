"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = require("typescript");
var includes = require("lodash/includes");
var languageUtils_1 = require("./languageUtils");
var JASMINE_DESCRIBE = [
    'describe',
    'fdescribe',
    'xdescribe',
];
var JASMINE_IT = [
    'it',
    'fit',
    'xit',
];
var JASMINE_SETUP_TEARDOWN = [
    'beforeEach',
    'afterEach',
    'beforeAll',
    'afterAll',
];
function isJasmineTest(node) {
    return includesJasmineTopLevelCalls(node.statements) || node.statements.find(isStatementWithWrappedJasmineCalls) != null;
}
exports.isJasmineTest = isJasmineTest;
function isJasmineDescribe(callExpressionText) {
    return includes(JASMINE_DESCRIBE, callExpressionText);
}
exports.isJasmineDescribe = isJasmineDescribe;
function isJasmineIt(callExpressionText) {
    return includes(JASMINE_IT, callExpressionText);
}
exports.isJasmineIt = isJasmineIt;
function isJasmineSetupTeardown(callExpressionText) {
    return includes(JASMINE_SETUP_TEARDOWN, callExpressionText);
}
exports.isJasmineSetupTeardown = isJasmineSetupTeardown;
function isStatementWithWrappedJasmineCalls(statement) {
    var functionBody;
    if (statement.kind === typescript_1.SyntaxKind.FunctionDeclaration) {
        functionBody = statement.body;
    }
    else if (statement.kind === typescript_1.SyntaxKind.ExpressionStatement) {
        functionBody = languageUtils_1.getIIFEExpressionBody(statement.expression);
    }
    if (functionBody != null) {
        return includesJasmineTopLevelCalls(functionBody.statements);
    }
    return false;
}
function includesJasmineTopLevelCalls(statements) {
    return statements.find(function (statement) { return isStatementJasmineTopLevelCall(statement); }) != null;
}
function isStatementJasmineTopLevelCall(statement) {
    if (statement.kind === typescript_1.SyntaxKind.ExpressionStatement) {
        var expression = statement.expression;
        if (expression.kind === typescript_1.SyntaxKind.CallExpression) {
            var call = expression;
            var expressionText = call.expression.getText();
            return isJasmineDescribe(expressionText) || isJasmineSetupTeardown(expressionText);
        }
    }
    return false;
}
//# sourceMappingURL=jasmineUtils.js.map